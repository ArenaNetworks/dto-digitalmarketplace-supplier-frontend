version: 2
references:
  venv_cache_key: &venv_cache_key
    key: venv-cache-{{ checksum "requirements.txt" }}-{{ checksum "requirements_for_test.txt" }}
  npm_cache_key: &npm_cache_key
    key: npm-cache-{{ checksum "package.json" }}
  cf_install: &cf_install
    run:
      name: Install Cloud Foundry CLI
      command: |
        curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
        sudo dpkg -i cf-cli_amd64.deb
        cf install-plugin https://github.com/govau/autopilot/releases/download/0.0.5-venapp/autopilot-linux -f
        cf install-plugin https://github.com/govau/cf-run-and-wait/releases/download/0.1/run-and-wait.linux64 -f
        cf -v
  deploy_docker: &deploy_docker
    docker:
      - image: circleci/python:2.7.15-stretch-node
        environment:
          TZ: "/usr/share/zoneinfo/Australia/Sydney"
  attach_workspace_root: &attach_workspace_root
    at: .
  persist_workspace_root: &persist_workspace_root
    root: .
    paths:
      - ~
  required_for_deploy: &required_for_deploy
    requires:
      - check_styles
      - run_tests_other
      - run_tests_briefs
      - run_tests_framework
      - run_tests_services
  
jobs:
  build:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          <<: *attach_workspace_root
      - checkout

      - restore_cache:
          <<: *venv_cache_key
      - run: 
          name: Pip Install
          command: |
            virtualenv venv
            source venv/bin/activate
            pip install -r requirements_for_test.txt
            pip uninstall -y pytest-sugar
      - save_cache:
          <<: *venv_cache_key
          paths:
            - venv

      - restore_cache:
          <<: *npm_cache_key
      - run: 
          name: Npm Install
          command: |
            npm install
            node_modules/.bin/pancake
            npm run frontend-install
      - save_cache:
          <<: *npm_cache_key
          paths:
            - node_modules

      - run: 
          name: Npm Build
          command: |
            npm run frontend-build:production
      - persist_to_workspace:
          <<: *persist_workspace_root

  check_styles:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          <<: *attach_workspace_root
      - run: 
          name: Check Styles
          command: |
            source venv/bin/activate
            pycodestyle

  run_tests_other:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          <<: *attach_workspace_root
      - run: 
          name: Run Tests
          command: |
            source venv/bin/activate
            py.test --ignore=tests/app/main/test_briefs.py --ignore=tests/app/main/test_frameworks.py --ignore=tests/app/main/test_services.py tests

  run_tests_briefs:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          <<: *attach_workspace_root
      - run: 
          name: Run Tests
          command: |
            source venv/bin/activate
            py.test tests/app/main/test_briefs.py

  run_tests_framework:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          <<: *attach_workspace_root
      - run: 
          name: Run Tests
          command: |
            source venv/bin/activate
            py.test tests/app/main/test_frameworks.py

  run_tests_services:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          <<: *attach_workspace_root
      - run: 
          name: Run Tests
          command: |
            source venv/bin/activate
            py.test tests/app/main/test_services.py

  slack_approval:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Slack about to go live
          command: |
            ./scripts/ci-notify-approval.sh

  deploy_to_rc:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - *cf_install
      - run:
          name: Deploy to RC
          command: |
            cf login -a https://api.system.y.cld.gov.au -o dta -s marketplace -u $CF_USER_STAGING -p $CF_PASSWORD_STAGING
            cf zero-downtime-push dm-rc-supplier -f manifest.rc.yml --show-app-log

  deploy_to_alpha:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - *cf_install
      - run:
          name: Deploy to RC
          command: |
            cf login -a https://api.system.y.cld.gov.au -o dta -s marketplace -u $CF_USER_STAGING -p $CF_PASSWORD_STAGING
            cf zero-downtime-push dm-alpha-supplier -f manifest.alpha.yml --show-app-log

  deploy_to_production_clone:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - *cf_install
      - run:
          name: Deploy to Production Clone
          command: |
            cf login -a https://api.system.y.cld.gov.au -o dta -s marketplace -u $CF_USER_STAGING -p $CF_PASSWORD_STAGING
            cf zero-downtime-push dm-pc-supplier -f manifest.pc.yml --show-app-log

  deploy_to_staging:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - *cf_install
      - run:
          name: Deploy to Staging
          command: |
            cf login -a https://api.system.y.cld.gov.au -o dta -s marketplace -u $CF_USER_STAGING -p $CF_PASSWORD_STAGING
            cf zero-downtime-push dm-dev-supplier -f manifest.staging.yml --show-app-log

  deploy_to_production:
    <<: *deploy_docker
    steps:
      - attach_workspace:
          at: .
      - *cf_install
      - run:
          name: Deploy to Production
          command: |
            cf login -a https://api.system.b.cld.gov.au -o dta -s marketplace -u $CF_USER_PROD -p $CF_PASSWORD_PROD
            cf zero-downtime-push dm-supplier -f manifest.production.yml --show-app-log
            scripts/ci-notify.sh


workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /release-.*/
      - check_styles:
          requires:
            - build
          filters:
            tags:
              only: /release-.*/
      - run_tests_other:
          requires:
            - build
          filters:
            tags:
              only: /release-.*/
      - run_tests_briefs:
          requires:
            - build
          filters:
            tags:
              only: /release-.*/
      - run_tests_framework:
          requires:
            - build
          filters:
            tags:
              only: /release-.*/
      - run_tests_services:
          requires:
            - build
          filters:
            tags:
              only: /release-.*/
      - slack_approval:
          <<: *required_for_deploy
          filters:
            tags:
              only: /release-.*/
            branches:
              ignore: /.*/
      - approval:
          type: approval
          requires:
            - slack_approval
          filters:
            tags:
              only: /release-.*/
            branches:
              ignore: /.*/
      - deploy_to_rc:
          <<: *required_for_deploy
          filters:
            tags:
              ignore: /.*/
            branches:
              only: rc
      - deploy_to_alpha:
          <<: *required_for_deploy
          filters:
            tags:
              ignore: /.*/
            branches:
              only: alpha
      - deploy_to_staging:
          <<: *required_for_deploy
          filters:
            tags:
              ignore: /.*/
            branches:
              only: master
      - deploy_to_production:
          requires:
            - approval
          filters:
            tags:
              only: /release-.*/
            branches:
              ignore: /.*/
      - deploy_to_production_clone:
          requires:
            - approval
          filters:
            tags:
              only: /release-.*/
            branches:
              ignore: /.*/
